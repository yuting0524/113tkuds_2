// 題目：Integer to Roman
// 給定一個整數 num (1 <= num <= 3999)，請將其轉換為羅馬數字並回傳。
//
// 羅馬數字由以下符號組成：
// I = 1, V = 5, X = 10, L = 50, C = 100, D = 500, M = 1000
//
// 規則：
// 1. 相同的符號連續出現，表示其值的總和，例如 III = 3。
// 2. 若較小的數字在較大的數字左邊，則表示要減去，如 IV = 4, IX = 9。
// 3. 若較小的數字在較大的數字右邊，則表示要加上，如 VI = 6。
// 4. 只能用 I, X, C, M 連續重複最多 3 次。4 與 9 類的數字用減法表示。

class Solution {
    public String intToRoman(int num) {
        // 對應表：數值與羅馬符號
        int[] values =    {1000, 900, 500, 400, 100, 90,  50, 40, 10, 9, 5, 4, 1};
        String[] symbols = {"M", "CM","D","CD","C","XC","L","XL","X","IX","V","IV","I"};

        StringBuilder sb = new StringBuilder();

        // 貪心：從大到小扣除數字
        for (int i = 0; i < values.length; i++) {
            while (num >= values[i]) {
                num -= values[i];         // 減去對應值
                sb.append(symbols[i]);    // 加上符號
            }
        }
        return sb.toString();
    }
}

/*
解題思路：
1. 建立一個「值 → 符號」對照表，包含特殊情況（900, 400, 90, 40, 9, 4）。
2. 使用貪心演算法，從最大值開始往下處理，把數字逐步減到 0。
3. 每次減去對應值，並將符號加到結果字串中。
4. 最後得到完整的羅馬數字。

時間複雜度：O(1)，因為 num 最大為 3999，迴圈最多執行幾十次。
空間複雜度：O(1)，僅需常數額外空間。
*/
